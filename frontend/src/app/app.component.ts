import { Component, OnInit, OnDestroy } from '@angular/core';
import { HomeComponent } from './pages/home/home.component';
import { PhotoService } from './services/photo.service';
import { ConfirmDialogComponent } from './shared/confirm-dialog/confirm-dialog.component';
import { ConfirmDialogService } from './shared/confirm-dialog/confirm-dialog.service';
import { Photo } from './models/photo';
import { CommonModule } from '@angular/common';
import { LoadingService } from './services/loading.service';
import { Observable } from 'rxjs';
import { SpinnerComponent } from './shared/spinner/spinner.component';
import { PhotoDataService } from './services/photo-data.service';
import { PhotoUtilsService } from './services/photo-utils.service';
import { PhotoIndexedDbService, PhotoToStore } from './services/photo-of-indexedDB.service';
import { Subscription } from 'rxjs';
import { AppModeService } from './services/app-mode.service';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';

@Component({
  selector: 'app-root',
  standalone: true, // ‚úÖ standalone –∫–∞–º–ø–∞–Ω–µ–Ω—Ç
  imports: [
    HomeComponent,
    SpinnerComponent,
    ConfirmDialogComponent,
    CommonModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit, OnDestroy {
  title = 'photolib-ng';
  loading$: Observable<boolean>;
  photos$!: Observable<Photo[]>;

  private subscriptions = new Subscription();

  photos: Photo[] = [];
  photosWithUrl: (Photo & { url: SafeUrl })[] = [];

  selectedPhoto: Photo | null = null;

  constructor(
    private loadingService: LoadingService,
    private confirmDialogService: ConfirmDialogService,
    private photoService: PhotoService,
    private photoDataService: PhotoDataService,
    private appModeService: AppModeService,
    private photoUtils: PhotoUtilsService,
    private indexedDbService: PhotoIndexedDbService,
    private sanitizer: DomSanitizer
  ) {
    this.loading$ = this.loadingService.loading$;
    this.photoService.photos$.subscribe(p => {
      this.photos = p ?? [];
    });
  }

  onPhotoSelected(photo: Photo) {
    this.selectedPhoto = photo;
  }

  private createPhotosWithUrl(photos: Photo[]): (Photo & { url: SafeUrl })[] {
    // –°–ø–∞—á–∞—Ç–∫—É –≤—ã–∑–≤–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—è URL, –∫–∞–ª—ñ —è–Ω—ã –±—ã–ª—ñ
    this.photosWithUrl.forEach(p => {
      try {
        URL.revokeObjectURL((p.url as any).changingThisBreaksApplicationSecurity || p.url);
      } catch { }
    });

    // –°—Ç–≤–∞—Ä—ç–Ω–Ω–µ –Ω–æ–≤—ã—Ö URL
    return photos.map(photo => ({
      ...photo,
      url: photo.file
        ? this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(photo.file))
        : '' // —Ü—ñ –º–æ–∂–Ω–∞ –ø–∞–¥—Å—Ç–∞–≤—ñ—Ü—å –∑–∞–ø–∞—Å–Ω—ã url
    }));
  }

  async loadPhotos() {
    this.photos = await this.photoDataService.getAllPhotos();
    this.photosWithUrl = this.createPhotosWithUrl(this.photos);
    this.photoService.setPhotos(this.photos); // –ê–±–Ω–∞—û–ª—è–µ–º —Å—ç—Ä–≤—ñ—Å —Ñ–æ—Ç–∞, –∫–∞–ª—ñ —Ç—Ä—ç–±–∞
  }

  async reloadPhotosFromServer() {
    await this.clearPhotosStorage();
    await this.photoDataService.loadPhotosFromServerToLocalDB();
    const photos = await this.photoDataService.getAllPhotos();
    this.photos = photos;
  }

  async ngOnInit(): Promise<void> {
    await this.indexedDbService.initDB(); // üü¢ 1. –°–ø–∞—á–∞—Ç–∫—É ‚Äî –∞–¥–∫—Ä—ã—Ü—å IndexedDB

    await this.syncUnsyncedPhotosOnStartup(); // üü¢ 2. –°—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞—Ü—å –∑ —Å–µ—Ä–≤–µ—Ä—É

    const modeSub = this.appModeService.mode$.subscribe(() => {
      console.log('AppComponent: App mode changed, reloading photos');
      this.loadPhotos(); // üü¢ 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫—ñ –∫–∞–ª—ñ IndexedDB –≥–∞—Ç–æ–≤–∞—è
    });

    this.subscriptions.add(modeSub);
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }

  async onSyncRequested() {
    console.log("üì° AppComponent: –°—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—è –∑–∞–ø—Ä–æ—à–∞–Ω–∞ –∑ toolbar");
    await this.photoDataService.syncWithServer();
    await this.loadPhotos(); // ‚¨ÖÔ∏è –ø–µ—Ä–∞–∑–∞–≥—Ä—É–∂–∞–µ–º –∑ IndexedDB
  }

  private async syncUnsyncedPhotosOnStartup() {
    console.log("üü° AppComponent: syncUnsyncedPhotosOnStartup() called");
    const allPhotos = await this.photoDataService.getAllPhotos();

    const unsynced = allPhotos.filter(p => !p.isSynced);
    if (unsynced.length === 0) {
      console.log("‚úÖ AppComponent:  –£—Å–µ —Ñ–æ—Ç–∫—ñ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω—ã—è");
      return;
    }

    console.log(`üîÑ AppComponent: –ó–Ω–æ–π–¥–∑–µ–Ω–∞ ${unsynced.length} –Ω–µ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω—ã—Ö —Ñ–æ—Ç–∞–∫. –°—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑—É—é...`);

    for (const photo of unsynced) {
      await this.photoDataService.uploadPhotoToServer(photo);
    }

    // –ü–∞—Å–ª—è —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ –∞–±–Ω–∞–≤—ñ—Ü—å —Ñ–æ—Ç–∞ —û —Å—ç—Ä–≤—ñ—Å–µ
    const updatedPhotos = await this.photoDataService.getAllPhotos();
    this.photoService.setPhotos(updatedPhotos);
  }

  onEditDescription() {
    console.log("AppComponent: Edit description dialog called");
  }

  onUploadPhoto(file: File) {
    const url = this.photoUtils.fileToSafeUrl(file);
    console.log('AppComponent: Starting upload photo...');

    const tempId = 'temp' + Date.now();
    const newPhoto: Photo = {
      id: tempId, // –£–Ω—ñ–∫–∞–ª—å–Ω—ã ID –Ω–∞ –ø–∞–¥—Å—Ç–∞–≤–µ —á–∞—Å—É
      fileName: file.name,
      description: '',
      file: file,     // –ö–∞–ª—ñ –ø–∞—Ç—Ä—ç–±–Ω–∞ –∑–∞—Ö–æ—û–≤–∞—Ü—å —Ñ–∞–π–ª
      url: url,        // üëà –î–∞–¥–∞–µ–º url –¥–ª—è –∞–¥–ª—é—Å—Ç—Ä–∞–≤–∞–Ω–Ω—è
      isSynced: false,
      isModified: false,
      isDeleted: false
    };
    this.photos.push(newPhoto);
    const photoToStore: PhotoToStore = {
      file: file,
      fileName: file.name,
      description: '',
      isSynced: false
    };
    this.photoDataService.savePhoto(photoToStore).then(() => {
      console.log('üü° AppComponent: Photo saved locally (not synced)');
      this.loadPhotos(); // ‚¨ÖÔ∏è –ì—ç—Ç–∞ –∞–±–Ω–∞—û–ª—è–µ —ñ `photosWithUrl`
    });
  }

  onDeletePhoto() {
    console.log("AppComponent: Deleting of photo", this.selectedPhoto);
    if (!this.selectedPhoto) return;

    this.confirmDialogService.show(
      'Are you sure you want to delete this photo?',
      async () => {
        this.photoService.deletePhoto(this.selectedPhoto!);

        // üü° –í–´–ü–†–ê–é–õ–ï–ù–ê: –ú–∞—Ä–∫—ñ—Ä—É–µ–º —Ñ–æ—Ç–∞ —è–∫ –≤—ã–¥–∞–ª–µ–Ω–∞–µ
        await this.photoDataService.markPhotoDeleted(this.selectedPhoto!.id);
        console.log('üóëÔ∏è AppComponent: –§–æ—Ç–∞ –ø–∞–∑–Ω–∞—á–∞–Ω–∞ —è–∫ –≤—ã–¥–∞–ª–µ–Ω–∞–µ');

        await this.loadPhotos(); // ‚¨ÖÔ∏è –∞–±–Ω–∞—û–ª—è–µ–º —Ñ–æ—Ç–∫—ñ –∑ IndexedDB
        this.selectedPhoto = null;
        console.log("AppComponent: –§–æ—Ç–∞ –≤—ã–¥–∞–ª–µ–Ω–∞ (–ª–∞–≥—ñ—á–Ω–∞)");
      },
      () => {
        console.log("AppComponent: –í—ã–¥–∞–ª–µ–Ω—å–Ω–µ –∞–¥–º–µ–Ω–µ–Ω–∞");
      }
    );
  }


  async clearPhotosStorage() {
    await this.photoDataService.clearLocalStorage();
    this.photos = [];
    console.log('üßπ AppComponent: Photos cleared from local IndexedDB and memory');
  }
}
