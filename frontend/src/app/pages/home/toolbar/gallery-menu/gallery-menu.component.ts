import { Component, EventEmitter, Output, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { GalleryManagerService } from '../../../../services/galleryServices/gallery-manager.service';
import { Gallery, GalleryBase } from '../../../../models/gallery-interfaces';
import { GalleryStateService } from '../../../../services/stateServices/gallery-state.service';

@Component({
  selector: 'app-gallery-menu',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './gallery-menu.component.html',
  styleUrls: ['./gallery-menu.component.scss']
})
export class GalleryMenuComponent implements OnInit {
  @Output() gallerySelected = new EventEmitter<Gallery>();

  galleries: Gallery[] = [];
  selectedGalleryId: number | null = null;

  constructor(
    private galleryService: GalleryManagerService,
    private galleryState: GalleryStateService
  ) { }

  ngOnInit(): void {
    this.galleryService.loadGalleriesFromServer();

    this.galleryService.galleries$.subscribe(g => {
      console.log('GalleryMenuComponent.ngOnInit: –ê—Ç—Ä—ã–º–∞—û –≥–∞–ª–µ—Ä—ç—ñ:', g);
      this.galleries = g;
    });

    this.galleryState.selectedGallery$.subscribe(gallery => {
      this.selectedGalleryId = gallery ? gallery.id : null;
      console.log('GalleryMenuComponent.ngOnInit: –ê—Ç—Ä—ã–º–∞—û selectedGallery:', gallery);
    });
  }


  onGalleryChange() {
    console.log('GalleryMenuComponent: üìÇ Gallery selected:', this.selectedGalleryId);
    if (this.selectedGalleryId !== null) {
      this.galleryService.setSelectedGalleryId(this.selectedGalleryId);
      const gallery = this.galleries.find(g => g.id === this.selectedGalleryId);
      console.log('GalleryMenuComponent: gallery:', gallery);
      if (gallery) {
        console.log('GalleryMenuComponent: üì§ Emitting gallery to ToolbarComponent:', gallery.name);
        this.gallerySelected.emit(gallery); // –ø–∞–≤–µ–¥–∞–º–ª—è–µ–º Toolbar
      }
    }
  }

  addGallery() {
    const name = prompt('–£–≤—è–¥–∑—ñ—Ü–µ –Ω–∞–∑–≤—É –Ω–æ–≤–∞–π –≥–∞–ª–µ—Ä—ç—ñ:');
    if (name && name.trim()) {
      const trimmed = name.trim();
      if (this.galleries.some(g => g.name === trimmed)) {
        alert('–ì–∞–ª–µ—Ä—ç—è –∑ —Ç–∞–∫–æ–π –Ω–∞–∑–≤–∞–π —É–∂–æ —ñ—Å–Ω—É–µ.');
        return;
      }
      const newGallery: GalleryBase = {
        name: trimmed,
        isSynced: false,
        isHidden: false
        // —ñ–Ω—à—ã—è –Ω–µ–∞–±—Ö–æ–¥–Ω—ã—è –ø–∞–ª—ñ, –∫–∞–ª—ñ —ë—Å—Ü—å
      };
      this.galleryService.addGallery(newGallery);
    }
  }


  renameGallery() {
    console.log('‚úèÔ∏è Rename clicked');
  }

  generateGalleryName() {
    console.log('üîÅ Generate name');
  }

  toggleVisibility() {
    console.log('üëÅÔ∏è Toggle visibility');
  }

  protectWithPassword() {
    console.log('üîí Password protection');
  }
}
