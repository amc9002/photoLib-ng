import { Injectable } from '@angular/core';
import { Photo, PhotoToStore, PhotoToUpdate } from '../../models/photo-interfaces';
import * as exifr from 'exifr';
import { DomSanitizer } from '@angular/platform-browser';
import { IndexedDbService } from './indexedDb.service';
import { DB_NAME, STORE_NAMES } from '../../config/db-config';
import { LoggerService } from '../logger.service';


export interface IPhotoDbAccessPort {
  /**
   * –£—Å—Ç–∞–ª—è–≤–∞—Ü—å —Å–ø–∞—Å—ã–ª–∫—É –Ω–∞ IndexedDB –±–∞–∑—É.
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è —ñ–Ω—ñ—Ü—ã—è–ª—ñ–∑–∞—Ü—ã—ñ —Å—ç—Ä–≤—ñ—Å—É –ø–∞—Å–ª—è –∞–¥–∫—Ä—ã—Ü—Ü—è –±–∞–∑—ã.
   *
   * @param db –ê–±‚Äô–µ–∫—Ç –±–∞–∑—ã –¥–∞–¥–∑–µ–Ω—ã—Ö IndexedDB
   */
  setDb(db: IDBDatabase): void;

  /**
   * –ü—Ä–∞–≤–µ—Ä—ã—Ü—å, —Ü—ñ —ñ—Å–Ω—É–µ —Ñ–æ—Ç–∞ –∑ –¥–∞–¥–∑–µ–Ω—ã–º id —É IndexedDB.
   *
   * @param id –Ü–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä —Ñ–æ—Ç–∞
   * @returns Promise<boolean>: true ‚Äî –∫–∞–ª—ñ —Ñ–æ—Ç–∞ —ñ—Å–Ω—É–µ, —ñ–Ω–∞–∫—à false
   */
  photoExists(id: number): Promise<boolean>;

  /**
   * –î–∞–¥–∞—Ü—å –Ω–æ–≤–∞–µ —Ñ–æ—Ç–∞ —û IndexedDB.
   *
   * @param photo –ê–±‚Äô–µ–∫—Ç —Ñ–æ—Ç–∞, —É–∫–ª—é—á–∞—é—á—ã —Ñ–∞–π–ª —ñ –º–µ—Ç–∞–¥–∞–Ω—ã—è
   * @returns Promise<number> –∑ –Ω–æ–≤—ã–º –∞—û—Ç–∞–º–∞—Ç—ã—á–Ω–∞ –∑–≥–µ–Ω–µ—Ä–∞–≤–∞–Ω—ã–º id
   */
  addPhoto(photo: Photo): Promise<number>;

  /**
   * –ó–∞—Ö–∞–≤–∞—Ü—å —Ñ–æ—Ç–∞ –±–µ–∑ —Ñ–∞–π–ª–∞ ‚Äî —Ç–æ–ª—å–∫—ñ –º–µ—Ç–∞–¥–∞–Ω—ã—è.
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è —Ñ–æ—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–Ω—ã—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞, –∫–∞–ª—ñ —Ñ–∞–π–ª –∞–¥—Å—É—Ç–Ω—ñ—á–∞–µ.
   *
   * @param photo –ê–±‚Äô–µ–∫—Ç —Ñ–æ—Ç–∞ –±–µ–∑ —Ñ–∞–π–ª–∞
   */
  savePhotoMetadataOnly(photo: Photo): Promise<void>;

  /**
   * –ó–∞—Ö–∞–≤–∞—Ü—å —Ñ–æ—Ç–∞ –∑ –∑–∞–¥–∞–¥–∑–µ–Ω—ã–º id (–∞—Ç—Ä—ã–º–∞–Ω—ã–º –∞–¥ —Å–µ—Ä–≤–µ—Ä–∞).
   * –ö–∞–ª—ñ —Ñ–∞–π–ª –∞–¥—Å—É—Ç–Ω—ñ—á–∞–µ ‚Äî –∞–¥—Ö—ñ–ª—è–µ –∞–ø–µ—Ä–∞—Ü—ã—é.
   *
   * @param id –ü—ç—û–Ω—ã id, —è–∫—ñ —Ç—Ä—ç–±–∞ –ø—Ä—ã—Å–≤–æ—ñ—Ü—å —Ñ–æ—Ç–∞
   * @param photoData –ê–±‚Äô–µ–∫—Ç —Ñ–æ—Ç–∞ (—É–∫–ª—é—á–∞—é—á—ã —Ñ–∞–π–ª)
   */
  savePhotoWithId(id: number, photoData: Photo): Promise<void>;

  /**
   * –ê—Ç—Ä—ã–º–∞—Ü—å —É—Å–µ —Ñ–æ—Ç–∞, —è–∫—ñ—è –∑–∞—Ö–æ—û–≤–∞—é—Ü—Ü–∞ —û IndexedDB.
   *
   * @returns Promise<Photo[]> —Å–∞ —Å–ø—ñ—Å–∞–º —É—Å—ñ—Ö —Ñ–æ—Ç–∞
   */
  getAllPhotos(): Promise<Photo[]>;

  /**
   * –ê—Ç—Ä—ã–º–∞—Ü—å —É—Å–µ —Ñ–æ—Ç–∞, —è–∫—ñ—è –Ω–∞–ª–µ–∂–∞—Ü—å –¥–∞ –∫–∞–Ω–∫—Ä—ç—Ç–Ω–∞–π –≥–∞–ª–µ—Ä—ç—ñ.
   *
   * @param galleryId –Ü–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä –≥–∞–ª–µ—Ä—ç—ñ
   * @returns Promise<Photo[]> —Å–∞ —Å–ø—ñ—Å–∞–º —Ñ–æ—Ç–∞ –≥—ç—Ç–∞–π –≥–∞–ª–µ—Ä—ç—ñ
   */
  getPhotosByGalleryId(galleryId: number): Promise<Photo[]>;

  /**
   * –ê—Ç—Ä—ã–º–∞—Ü—å —Ñ–æ—Ç–∞ –ø–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ã–º id –∑ IndexedDB.
   *
   * –ó–≤—ã—á–∞–π–Ω–∞ —Ñ–æ—Ç–∞–∑–¥—ã–º–∫—ñ –ø–∞–≤—ñ–Ω–Ω—ã —á—ã—Ç–∞—Ü—Ü–∞ –∑ –∫—ç—à–∞–≤–∞–Ω–∞–≥–∞ —Å—Ç—ç–π—Ç–∞,
   * –∞–ª–µ –≥—ç—Ç—ã –º–µ—Ç–∞–¥ –∫–∞—Ä—ã—Å–Ω—ã –¥–ª—è –ø—Ä–∞–º–æ–≥–∞ –¥–æ—Å—Ç—É–ø—É –¥–∞ IndexedDB —É –≤—ã–ø–∞–¥–∫–∞—Ö,
   * –∫–∞–ª—ñ –Ω–µ–∞–±—Ö–æ–¥–Ω–∞ –∑–∞–≥—Ä—É–∑—ñ—Ü—å –∞—Å–æ–±–Ω–∞–µ —Ñ–æ—Ç–∞ –ø–∞ id (–Ω–∞–ø—Ä—ã–∫–ª–∞–¥, lazy-–∑–∞–≥—Ä—É–∑–∫–∞,
   * –∞–±–æ –∫—Ä–æ–ø–∫–∞–≤–∞–µ –∞–±–Ω–∞—û–ª–µ–Ω–Ω–µ).
   *
   * @param id –Ü–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä —Ñ–æ—Ç–∞
   * @returns Promise<Photo | undefined>
   */
  getPhotoById(id: number): Promise<Photo | undefined>;

  /**
   * –ê—Ç—Ä—ã–º–∞—Ü—å —Å—ã—Ä—ã (raw) –∞–±‚Äô–µ–∫—Ç —Ñ–æ—Ç–∞ –∑ IndexedDB –ø–∞ id.
   * –í—è—Ä—Ç–∞–µ –¥–∞–¥–∑–µ–Ω—ã—è —û —Ç—ã–º –≤—ã–≥–ª—è–¥–∑–µ, —É —è–∫—ñ–º —è–Ω—ã –∑–∞—Ö–æ—û–≤–∞—é—Ü—Ü–∞,
   * –±–µ–∑ –¥–∞–¥–∞—Ç–∫–æ–≤–∞–π –∞–ø—Ä–∞—Ü–æ—û–∫—ñ.
   *
   * @param id –Ü–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä —Ñ–æ—Ç–∞
   * @returns Promise<any | null>: —Å—ã—Ä—ã –∞–±‚Äô–µ–∫—Ç –∞–±–æ null, –∫–∞–ª—ñ –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã
   */
  getRawPhotoById(id: number): Promise<any | null>;

  /**
   * –ê—Ç—Ä—ã–º–∞—Ü—å —É—Å–µ —Ñ–æ—Ç–∞, —è–∫—ñ—è —è—à—á—ç –Ω–µ –±—ã–ª—ñ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω—ã—è –∑ —Å–µ—Ä–≤–µ—Ä–∞–º.
   *
   * @returns Promise<Photo[]> —Å–∞ —Å–ø—ñ—Å–∞–º —Ñ–æ—Ç–∞ –¥–ª—è —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ
   */
  getPhotosForSync(): Promise<Photo[]>;

  /**
   * –í—ã—Ü—è–≥–Ω—É—Ü—å EXIF-–º–µ—Ç–∞–¥–∞–Ω—ã—è –∑ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–∞.
   *
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –±—ñ–±–ª—ñ—è—Ç—ç–∫–∞ `exifr` –¥–ª—è –∞—Ç—Ä—ã–º–∞–Ω–Ω—è —Ç—ç—Ö–Ω—ñ—á–Ω–∞–π —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—ñ,
   * —É–∫–ª—é—á–∞—é—á—ã GPS-–∫–∞–∞—Ä–¥—ã–Ω–∞—Ç—ã, –¥–∞—Ç—É —Å—Ç–≤–∞—Ä—ç–Ω–Ω—è, –Ω–∞–ª–∞–¥—ã –∫–∞–º–µ—Ä—ã —ñ —ñ–Ω—à.
   *
   * @param file –§–∞–π–ª —Ñ–∞—Ç–∞–≥—Ä–∞—Ñ—ñ—ñ
   * @returns Promise<any> –∑ EXIF-–º–µ—Ç–∞–¥–∞–Ω—ã–º—ñ –∞–±–æ –ø—É—Å—Ç—ã –∞–±‚Äô–µ–∫—Ç —É –≤—ã–ø–∞–¥–∫—É –ø–∞–º—ã–ª–∫—ñ
   */
  extractExifData(file: File): Promise<any>;

  /**
   * –ê–±–Ω–∞–≤—ñ—Ü—å —Ñ–æ—Ç–∞ –ø–∞ id.
   *
   * @param photo –ê–±‚Äô–µ–∫—Ç PhotoToUpdate –∑ —ñ–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä–∞–º —ñ –∞–±–Ω–æ—û–ª–µ–Ω—ã–º—ñ –ø–æ–ª—è–º—ñ
   */
  updatePhoto(photo: PhotoToUpdate): Promise<void>;

  /**
   * –ê–±–Ω–∞–≤—ñ—Ü—å —É—Å–µ —Ñ–æ—Ç–∞, —à—Ç–æ –Ω–∞–ª–µ–∂–∞–ª—ñ –¥–∞ oldGalleryId, –∑–∞–º—è–Ω—ñ—û—à—ã –Ω–∞ newGalleryId.
   *
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –ø—Ä—ã —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ, –∫–∞–ª—ñ —á–∞—Å–æ–≤—ã id –∑–∞–º—è–Ω—è–µ—Ü—Ü–∞ –Ω–∞ –ø–∞—Å—Ç–∞—è–Ω–Ω—ã.
   *
   * @param oldGalleryId –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á—ç–Ω–Ω–µ galleryId
   * @param newGalleryId –ù–æ–≤—ã galleryId
   */
  updatePhotosGalleryId(oldGalleryId: number, newGalleryId: number): Promise<void>;

  /**
   * –í—ã–¥–∞–ª—ñ—Ü—å —Ñ–æ—Ç–∞ –∑ IndexedDB –ø–∞ id.
   *
   * @param id –Ü–¥—ç–Ω—Ç—ã—Ñ—ñ–∫–∞—Ç–∞—Ä —Ñ–æ—Ç–∞, —è–∫–æ–µ —Ç—Ä—ç–±–∞ –≤—ã–¥–∞–ª—ñ—Ü—å
   */
  deletePhoto(id: number): Promise<void>;

  /**
   * –í—ã–¥–∞–ª—ñ—Ü—å —É—Å–µ —Ñ–æ—Ç–∞ –∑ IndexedDB.
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –ø—Ä—ã –ø–æ—û–Ω–∞–π –∞—á—ã—Å—Ç—Ü—ã –∞–±–æ —Ä—ç—Å—ç—Ç—ã–Ω–≥—É –¥–∞–¥–∑–µ–Ω—ã—Ö.
   */
  deleteAllPhotos(): Promise<void>;

  /**
   * –ó–∞–º—è–Ω—ñ—Ü—å —Ñ–æ—Ç–∞ –∑ –∞–¥–Ω—ã–º id –Ω–∞ —ñ–Ω—à–∞–µ —Ñ–æ—Ç–∞.
   * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞, –∫–∞–ª—ñ –Ω–æ–≤–∞–µ —Ñ–æ—Ç–∞ –ø–∞–≤—ñ–Ω–Ω–∞ –∑–∞–Ω—è—Ü—å –º–µ—Å—Ü–∞ —Å—Ç–∞—Ä–æ–≥–∞ (–Ω–∞–ø—Ä—ã–∫–ª–∞–¥, –ø–∞—Å–ª—è —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ).
   *
   * @param oldId Id, —è–∫—ñ —Ç—Ä—ç–±–∞ –∑–∞–º—è–Ω—ñ—Ü—å
   * @param newPhoto –ù–æ–≤—ã –∞–±‚Äô–µ–∫—Ç Photo, —è–∫—ñ –∑–∞–º—è–Ω—è–µ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–∞
   */
  replacePhotoId(oldId: number, newPhoto: Photo): Promise<void>;
}


@Injectable({
  providedIn: 'root'
})
export class PhotoIndexedDbService implements IPhotoDbAccessPort {
  private dbName = DB_NAME;
  private storeName = STORE_NAMES.PHOTOS;
  private db!: IDBDatabase;

  constructor(
    private logger: LoggerService,
    private sanitizer: DomSanitizer,
    private indexedDbService: IndexedDbService
  ) { }


  setDb(db: IDBDatabase): void {
    this.db = db;
  }


  async addPhoto(photo: PhotoToStore): Promise<number> {
    const result = await this.saveObject(photo, 'add');
    if (typeof result === 'number') return result;
    throw new Error('‚ùå PhotoIndexedDbService: ID is not a number');
  }

  async savePhotoWithId(id: number, photoData: any): Promise<void> {
    if (!photoData.file) {
      return Promise.reject('‚ùå PhotoIndexedDbService: photoData.file is undefined');
    }
    const dataToStore = { ...photoData, id };
    await this.saveObject(dataToStore, 'put');
  }
  /*–∫–∞–ª—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –º–∞—é—Ü—Ü–∞ —Ñ–æ—Ç–∞, —è–∫—ñ—è –∞–¥—Å—É—Ç–Ω—ñ—á–∞—é—Ü—å —É IndexedDB*/
  async savePhotoMetadataOnly(photo: Photo): Promise<void> {
    const dataToStore = {
      ...photo,
      file: new File([], photo.fileName ?? 'server-photo.jpg'),
      isSynced: true
    };

    await this.saveObject(dataToStore, 'put');
  }


  async getAllPhotos(): Promise<Photo[]> {
    return this.withTransaction<Photo[]>('readonly', async (store) => {
      const request = store.getAll();
      const rawPhotos = await this.requestToPromise<any[]>(request);

      const filteredPhotos = rawPhotos.filter(p => !p.isDeleted);

      return filteredPhotos.map(p => {
        if (!(p.file instanceof File)) {
          this.logger.warn('--s', '‚ö†Ô∏è file is not a File instance!', p.file);
        }
        const url = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(p.file));
        this.logger.log('--h', 'üñºÔ∏è –°—Ç–≤–æ—Ä–∞–Ω—ã url –¥–ª—è photo.id =', p.id, url);

        return {
          ...p,
          url,
          isSynced: p.isSynced ?? false,
          id: p.id
        };
      });
    });
  }

  async getPhotosByGalleryId(galleryId: number): Promise<Photo[]> {
    return this.withTransaction<Photo[]>('readonly', async (store) => {
      const request = store.getAll();
      const allPhotos = await this.requestToPromise<Photo[]>(request);

      return allPhotos.filter(p => Number(p.galleryId) === Number(galleryId));
    });
  }

  async getPhotoById(id: number): Promise<Photo | undefined> {
    return this.withTransaction<Photo | undefined>('readonly', async (store) => {
      const request = store.get(id);
      const result = await this.requestToPromise<Photo | undefined>(request);
      return result;
    });
  }

  async getRawPhotoById(id: number): Promise<any | null> {
    return this.withTransaction<any | null>('readonly', async (store) => {
      const request = store.get(id);
      const raw = await this.requestToPromise<any | null>(request);
      return raw ?? null;
    });
  }

  async photoExists(id: number): Promise<boolean> {
    return this.withTransaction<boolean>('readonly', async (store) => {
      const request = store.get(id);
      try {
        const result = await this.requestToPromise<any>(request);
        return !!result;
      } catch {
        return false;
      }
    });
  }

  async getPhotosForSync(): Promise<Photo[]> {
    const allPhotos = await this.getAllPhotos(); // üîÑ –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ–º –∞–≥—É–ª—å–Ω—ã –º–µ—Ç–∞–¥
    return allPhotos.filter(p => !p.isSynced || p.isDeleted || p.isModified);
  }

  async extractExifData(file: File): Promise<any> {
    try {
      const exif = await exifr.parse(file, {
        gps: true,        // GPS –¥–∞–¥–∑–µ–Ω—ã—è
        exif: true,       // EXIF-—ñ–Ω—Ñ–æ (–¥–∞—Ç–∞, ISO, –¥—ã—è—Ñ—Ä–∞–≥–º–∞ —ñ –≥.–¥.)
      });
      this.logger.log('--h', "üì∏ PhotoIndexedDbService: EXIF extracted:", exif);
      return exif ?? {};
    } catch (error) {
      this.logger.error('--s', "‚ùå PhotoIndexedDbService: Failed to extract EXIF data:", error);
      return {};
    }
  }


  async updatePhoto(updatedPhoto: PhotoToUpdate): Promise<void> {
    if (updatedPhoto.id === undefined) {
      return Promise.reject('‚ùå Cannot update photo without id');
    }
    const id = updatedPhoto.id;

    return this.withTransaction<void>('readwrite', async (store) => {
      const getRequest = store.get(id);
      const existing = await this.requestToPromise<Photo | undefined>(getRequest);
      if (!existing) {
        throw new Error(`‚ùå Photo with id=${id} not found`);
      }
      const updated = {
        ...existing,
        ...updatedPhoto,
      };
      const putRequest = store.put(updated);
      await this.requestToPromise(putRequest);
      this.logger.log('--s', `‚úÖ Photo updated (id=${id})`);
    });
  }

  async updatePhotosGalleryId(oldGalleryId: number, newGalleryId: number): Promise<void> {
    const photos = await this.getPhotosByGalleryId(oldGalleryId);
    for (const photo of photos) {
      await this.updatePhoto({ id: photo.id, galleryId: newGalleryId });
    }
    this.logger.log('--s', `‚úÖ Updated ${photos.length} photos from galleryId=${oldGalleryId} to ${newGalleryId}`);
  }


  async replacePhotoId(oldId: number, newPhoto: Photo): Promise<void> {
    await this.deletePhoto(oldId);
    await this.savePhotoWithId(newPhoto.id, newPhoto);
    this.logger.log('--s', `‚úÖ PhotoIndexedDbService: –ó–∞–º—è–Ω—ñ—û —Ñ–æ—Ç–∞ id=${oldId} –Ω–∞ id=${newPhoto.id}`);
  }


  async deletePhoto(id: number): Promise<void> {
    if (id === undefined) {
      return Promise.reject('‚ùå deletePhoto: id is undefined');
    }

    return this.withTransaction<void>('readwrite', async (store) => {
      const deleteRequest = store.delete(id);
      await this.requestToPromise(deleteRequest);
      this.logger.log('--s', `üóëÔ∏è Photo deleted (id=${id})`);
    });
  }

  async deleteAllPhotos(): Promise<void> {
    return this.withTransaction<void>('readwrite', async (store) => {
      const clearRequest = store.clear();
      await this.requestToPromise(clearRequest);
      this.logger.log('--s', 'üßπ All photos deleted from IndexedDB');
    });
  }

  private withTransaction<T>(
    mode: IDBTransactionMode,
    action: (store: IDBObjectStore) => Promise<T>
  ): Promise<T> {
    return this.indexedDbService.performTransaction(
      this.dbName,
      this.storeName,
      mode,
      (store) => action(store)
    );
  }

  private saveObject<T>(
    object: T,
    operation: 'add' | 'put'
  ): Promise<IDBValidKey | void> {
    return this.withTransaction('readwrite', (store) =>
      new Promise((resolve, reject) => {
        const request = store[operation](object);
        request.onsuccess = (event) => {
          const result = (event.target as IDBRequest).result;
          console.log(`‚úÖ PhotoIndexedDbService: ${operation} success`, result);
          resolve(result);
        };
        request.onerror = () => {
          console.error(`‚ùå PhotoIndexedDbService: ${operation} error`, request.error);
          reject(request.error);
        };
      })
    );
  }

  private requestToPromise<T>(request: IDBRequest<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

}