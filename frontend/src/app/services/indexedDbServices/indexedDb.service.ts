import { Injectable } from '@angular/core';
import { LoggerService } from '../logger.service';

export type UpgradeCallback = (db: IDBDatabase) => void;

    /** üß© –ê–≥—É–ª—å–Ω—ã —ñ–Ω—Ç—ç—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∞—Ü—ã –∑ IndexedDB */
export interface IIndexedDbService {
    performTransaction<T>(
        dbName: string,
        storeName: string,
        mode: IDBTransactionMode,
        operation: (store: IDBObjectStore, tx: IDBTransaction) => Promise<T> | T
    ): Promise<T>;
    initDB(dbName: string, version: number, onUpgradeNeeded?: UpgradeCallback): Promise<IDBDatabase>;
    waitForDbReady(dbName: string): Promise<IDBDatabase>;
    getDbOrThrow(dbName: string): Promise<IDBDatabase>;
    getAll(storeName: string, dbName: string): Promise<any[]>;
}

@Injectable({
    providedIn: 'root'
})
export class IndexedDbService implements IIndexedDbService {
    private dbs = new Map<string, IDBDatabase>();
    private dbReadyPromises = new Map<string, Promise<IDBDatabase>>();

    constructor(private logger: LoggerService) {
        this.logger.log('--s', 'üóÑÔ∏è IndexedDbService: –±–∞–∑–∞–≤—ã —Å—ç—Ä–≤—ñ—Å —Å—Ç–≤–æ—Ä–∞–Ω—ã');
    }

    /**
     * –í—ã–∫–æ–Ω–≤–∞–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ã—é –Ω–∞–¥ —É–∫–∞–∑–∞–Ω–∞–π IndexedDB –±–∞–∑–∞–π —ñ —Å—Ö–æ–≤—ñ—à—á–∞–º.
     * @param dbName –ù–∞–∑–≤–∞ –±–∞–∑—ã (–∑–≤—ã—á–∞–π–Ω–∞ `PHOTO_DB_NAME`)
     * @param storeName –ù–∞–∑–≤–∞ —Å—Ö–æ–≤—ñ—à—á–∞
     * @param mode –†—ç–∂—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ã—ñ: "readonly" –∞–±–æ "readwrite"
     * @param operation –§—É–Ω–∫—Ü—ã—è, —è–∫–∞—è –ø—Ä–∞—Ü—É–µ —Å–∞ store —ñ tx
     */
    public async performTransaction<T>(
        dbName: string,
        storeName: string,
        mode: IDBTransactionMode,
        operation: (store: IDBObjectStore, tx: IDBTransaction) => Promise<T> | T
    ): Promise<T> {
        const db = await this.getDbOrThrow(dbName);

        return new Promise<T>((resolve, reject) => {
            const tx = db.transaction([storeName], mode);
            const store = tx.objectStore(storeName);

            Promise.resolve(operation(store, tx))
                .then(result => {
                    tx.oncomplete = () => resolve(result);
                    tx.onerror = () => reject(tx.error);
                    tx.onabort = () => reject(tx.error);
                })
                .catch(error => {
                    tx.abort();
                    reject(error);
                });
        });
    }

    /**
     * –Ü–Ω—ñ—Ü—ã—è–ª—ñ–∑–∞—Ü—ã—è –±–∞–∑—ã –¥–∞–¥–∑–µ–Ω—ã—Ö
     * @param dbName –ù–∞–∑–≤–∞ –±–∞–∑—ã
     * @param version –í–µ—Ä—Å—ñ—è –±–∞–∑—ã
     * @param onUpgradeNeeded –ö–∞–ª–±—ç–∫ –¥–ª—è —Å—Ç–≤–∞—Ä—ç–Ω–Ω—è/–∞–±–Ω–∞—û–ª–µ–Ω–Ω—è stores
     */
    initDB(dbName: string, version = 1, onUpgradeNeeded?: UpgradeCallback): Promise<IDBDatabase> {
        this.logger.log('--s', `üìÇ initDB: name=${dbName}, version=${version}`);

        const promise = new Promise<IDBDatabase>((resolve, reject) => {
            const request = indexedDB.open(dbName, version);

            request.onupgradeneeded = (event: IDBVersionChangeEvent) => {
                const db = (event.target as IDBOpenDBRequest).result;
                this.logger.log('--s', 'üìà IndexedDbService: onupgradeneeded triggered for', db.name, db.version);
                if (onUpgradeNeeded) {
                    onUpgradeNeeded(db);
                }
            };

            request.onsuccess = () => {
                const db = request.result;
                this.dbs.set(dbName, db);
                this.logger.log('--s', `üìÇ IndexedDbService: –±–∞–∑–∞ "${dbName}" –∞–¥–∫—Ä—ã—Ç–∞`);
                resolve(db);
            };

            request.onerror = () => {
                this.logger.error('--s', `‚ùå IndexedDbService: –ø–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞–¥–∫—Ä—ã—Ü—Ü—ñ –±–∞–∑—ã "${dbName}"`, request.error);
                reject(request.error);
            };
        });

        this.dbReadyPromises.set(dbName, promise);
        return promise;
    }

    /**
     * –ß–∞–∫–∞–Ω–Ω–µ –≥–∞—Ç–æ—û–Ω–∞—Å—Ü—ñ –±–∞–∑—ã (–Ω–∞–ø—Ä—ã–∫–ª–∞–¥, –∫–∞–ª—ñ —è–Ω–∞ –∞–¥–∫—Ä—ã–≤–∞–µ—Ü—Ü–∞ —ñ–Ω—à—ã–º —Å—ç—Ä–≤—ñ—Å–∞–º)
     * @param dbName –ù–∞–∑–≤–∞ –±–∞–∑—ã
     */
    waitForDbReady(dbName: string): Promise<IDBDatabase> {
        const promise = this.dbReadyPromises.get(dbName);
        if (!promise) {
            throw new Error(`IndexedDbService: –±–∞–∑–∞ "${dbName}" —è—à—á—ç –Ω–µ —ñ–Ω—ñ—Ü—ã—è–ª—ñ–∑–∞–≤–∞–Ω–∞—è.`);
        }
        return promise;
    }

    /**
     * –ê—Ç—Ä—ã–º–ª—ñ–≤–∞–µ –±–∞–∑—É –∞–±–æ –∫—ñ–¥–∞–µ –ø–∞–º—ã–ª–∫—É, –∫–∞–ª—ñ —è–Ω–∞ –Ω–µ–¥–∞—Å—Ç—É–ø–Ω–∞—è
     * @param dbName –ù–∞–∑–≤–∞ –±–∞–∑—ã
     */
    async getDbOrThrow(dbName: string): Promise<IDBDatabase> {
        const db = this.dbs.get(dbName);
        if (db) return db;

        this.logger.warn('--s', `üïì getDbOrThrow: –±–∞–∑–∞ "${dbName}" –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω–∞, —á–∞–∫–∞–µ–º init...`);
        return await this.waitForDbReady(dbName);
    }

    /**
     * –ê—Ç—Ä—ã–º–ª—ñ–≤–∞–µ —û—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑ store
     * @param storeName –ù–∞–∑–≤–∞ store
     * @param dbName –ù–∞–∑–≤–∞ –±–∞–∑—ã
     */
    async getAll(storeName: string, dbName: string): Promise<any[]> {
        const db = await this.getDbOrThrow(dbName);
        return new Promise((resolve, reject) => {
            const tx = db.transaction([storeName], 'readonly');
            const store = tx.objectStore(storeName);
            const request = store.getAll();

            request.onsuccess = () => {
                this.logger.log('--s', `üì• getAll: –∞—Ç—Ä—ã–º–∞–Ω–∞ ${request.result.length} —ç–ª–µ–º–µ–Ω—Ç–∞—û –∑ "${storeName}"`);
                resolve(request.result);
            };

            request.onerror = () => {
                this.logger.error('--s', `‚ùå getAll: –ø–∞–º—ã–ª–∫–∞ –ø—Ä—ã —á—ã—Ç–∞–Ω–Ω—ñ –∑ "${storeName}"`, request.error);
                reject(request.error);
            };
        });
    }
}
