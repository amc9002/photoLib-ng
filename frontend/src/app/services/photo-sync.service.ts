import { Injectable } from '@angular/core';
import { Photo } from '../models/photo-interfaces';
import { PhotoIndexedDbService } from './photo-of-indexedDB.service';
import { PhotoApiService } from './photo-api.service';
import { firstValueFrom } from 'rxjs';
import { PhotoBuilderService } from './photo-builder.service';

interface SyncOptions {
    fullReconcile?: boolean;
    syncNew?: boolean;
    syncUpdated?: boolean;
    syncDeleted?: boolean;
}

@Injectable({
    providedIn: 'root'
})
export class PhotoSyncService {
    constructor(
        private storage: PhotoIndexedDbService,
        private api: PhotoApiService,
        private photoBuilder: PhotoBuilderService
    ) { }

    async syncWithServer(options: SyncOptions = {}): Promise<void> {
        console.log('üîÑ PhotoSyncService: –∑–∞–ø—É—Å–∫ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º—ñ', options);

        // –ö–∞–ª—ñ fullReconcile –Ω–µ —û—Å—Ç–∞–Ω–æ—û–ª–µ–Ω—ã, –ø—Ä–∞–≤–µ—Ä—ã—Ü—å, —Ü—ñ –ø–∞—Ç—Ä—ç–±–µ–Ω reconcile
        if (options.fullReconcile === undefined || options.fullReconcile === false) {
            const needReconcile = await this.hasOrphanedLocalPhotos();
            if (needReconcile) {
                console.log('‚ÑπÔ∏è PhotoSyncService: reconcile –ø–∞—Ç—Ä—ç–±–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º reconcileLocalWithServer');
                await this.reconcileLocalWithServer();
            } else {
                console.log('‚ÑπÔ∏è PhotoSyncService: reconcile –Ω–µ –ø–∞—Ç—Ä—ç–±–µ–Ω');
            }
        } else if (options.fullReconcile) {
            await this.reconcileLocalWithServer();
        }

        const unsyncedPhotosRaw = await this.storage.getPhotosForSync();
        const unsyncedPhotos: Photo[] = unsyncedPhotosRaw.filter(p => p.id !== undefined) as Photo[];


        const actions = [
            {
                name: 'delete',
                enabled: options.syncDeleted !== false,
                condition: (p: Photo) => p.isDeleted,
                action: (p: Photo) => this.syncDeletedPhoto(p)
            },
            {
                name: 'update',
                enabled: options.syncUpdated !== false,
                condition: (p: Photo) => p.isModified && p.isSynced,
                action: (p: Photo) => this.syncUpdatedPhoto(p)
            },
            {
                name: 'uploadNew',
                enabled: options.syncNew !== false,
                condition: (p: Photo) => !p.isSynced,
                action: (p: Photo) => this.syncNewPhoto(p)
            }
        ];

        for (const photo of unsyncedPhotos) {
            const matchedAction = actions.find(
                a => a.enabled && a.condition(photo)
            );
            if (matchedAction) {
                console.log(`üîÅ –°—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑—É–µ–º —Ñ–æ—Ç–∞ id=${photo.id} ‚Üí ${matchedAction.name}`);
                await matchedAction.action(photo);
            } else {
                console.log(`‚úÖ Photo id=${photo.id} –Ω–µ –ø–∞—Ç—Ä–∞–±—É–µ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ`);
            }
        }
    }


    private async syncNewPhoto(photo: Photo): Promise<Photo> {
        console.log('Sync new photo id=', photo.id);

        if (!photo.file) {
            console.warn(`‚ùå PhotoSyncService: –ù—è–º–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ç–∞ id=${photo.id}`);
            throw new Error('No file to upload');
        }

        const formData = this.photoBuilder.buildFormData(photo, { includeFileName: true });

        try {
            const response = await firstValueFrom(this.api.uploadPhoto(formData));

            const serverId = response.id;
            if (!serverId) {
                console.error(`‚ùå PhotoSyncService: –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—è—Ä–Ω—É—û ID`);
                throw new Error('Server did not return ID after upload');
            }

            console.log(`üì§ PhotoSyncService: –ó–∞–≥—Ä—É–∂–∞–Ω–∞ —Ñ–æ—Ç–∞. –°–µ—Ä–≤–µ—Ä –≤—è—Ä–Ω—É—û ID = ${serverId}`);

            const updatedPhoto: Photo = {
                ...photo,
                id: serverId,
                isSynced: true,
                isModified: false
            };

            await this.storage.savePhotoWithId(serverId, updatedPhoto);

            if (photo.id !== serverId) {
                await this.storage.deletePhoto(photo.id);
            }

            return updatedPhoto;
        }
        catch (error) {
            console.error(`‚ùå PhotoSyncService: –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∑–∞–≥—Ä—É–∑—Ü—ã —Ñ–æ—Ç–∞ id=${photo.id}`, error);
            throw error;
        }

    }

    private async syncUpdatedPhoto(photo: Photo): Promise<void> {
        console.log('Sync updated photo id=', photo.id);

        if (photo.id === undefined) {
            console.warn('‚ùå PhotoSyncService: –ù—è–º–∞ id —É —Ñ–æ—Ç–∞ –¥–ª—è –∞–±–Ω–∞—û–ª–µ–Ω–Ω—è');
            return;
        }

        try {
            const formData = this.photoBuilder.buildFormData(photo);

            console.log('üì§ PhotoSyncService: –ê–¥–ø—Ä–∞—û–ª—è–µ–º –∞–±–Ω–æ—û–ª–µ–Ω—ã—è –¥–∞–¥–∑–µ–Ω—ã—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
            await firstValueFrom(this.api.updatePhoto(photo.id, formData));

            const photoToUpdate = this.photoBuilder.buildPhotoToUpdate(photo);

            // ‚úÖ –ê–±–Ω–∞—û–ª—è–µ–º IndexedDB: —Å–∫—ñ–¥–≤–∞–µ–º isModified, —É—Å—Ç–∞–ª—ë—û–≤–∞–µ–º isSynced
            await this.storage.updatePhoto(photoToUpdate);

            console.log(`‚úÖ PhotoSyncService: –§–æ—Ç–∞ –∞–±–Ω–æ—û–ª–µ–Ω–∞ –Ω–∞ —Å—ç—Ä–≤–µ—Ä—ã —ñ —û IndexedDB (id=${photo.id})`);
        }
        catch (error) {
            console.error(`‚ùå PhotoSyncService: –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞–±–Ω–∞—û–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–∞ id=${photo.id}`, error);
        }
    }

    private async syncDeletedPhoto(photo: Photo): Promise<void> {
        console.log('Sync deleted photo id=', photo.id);
        try {
            // 1. –í—ã–¥–∞–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
            await this.api.deletePhoto(photo.id);

            // 2. –í—ã–¥–∞–ª—è–µ–º –∑ IndexedDB
            await this.storage.deletePhoto(photo.id);

            console.log(`‚úÖ –§–æ—Ç–∞ id=${photo.id} –≤—ã–¥–∞–ª–µ–Ω–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞ —ñ IndexedDB`);
        } catch (error) {
            console.error(`‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –≤—ã–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–∞ id=${photo.id}`, error);
        }
    }

    private async reconcileLocalWithServer(): Promise<void> {
        console.log('PhotoSyncService: üîÅ reconcileLocalWithServer: —Å—Ç–∞—Ä—Ç');

        try {
            const serverPhotos = await firstValueFrom(this.api.getPhotos());
            const serverIds = new Set(serverPhotos.map(p => p.id));
            const localPhotos = await this.storage.getAllPhotos();

            const orphanedPhotos = localPhotos.filter(
                p => !serverIds.has(p.id) && !p.isDeleted
            );

            for (const photo of orphanedPhotos) {
                try {
                    console.log(`‚ö†Ô∏è reconcileLocalWithServer: –∞—Ä—Ñ–∞–Ω—Å–∫–∞–µ —Ñ–æ—Ç–∞ id=${photo.id}, –ø–∞–∑–Ω–∞—á–∞–µ–º —è–∫ –Ω–µ—Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω–∞–µ`);

                    const serverPhoto = await this.syncNewPhoto(photo);

                    const updatedPhoto = {
                    ...photo,
                    isSynced: false,
                    isModified: true 
                };
                    await this.storage.updatePhoto(serverPhoto);
                }
                catch (error) {
                    console.error(`‚ùå reconcileLocalWithServer: –ø–∞–º—ã–ª–∫–∞ –∑ —Ñ–æ—Ç–∞ id=${photo.id}`, error);
                }
            }

            console.log('‚úÖ reconcileLocalWithServer: –∑–∞–≤–µ—Ä—à–∞–Ω–∞');
        }
        catch (error) {
            console.error('‚ùå reconcileLocalWithServer: –ø–∞–º—ã–ª–∫–∞', error);
        }
    }

    
    private async hasOrphanedLocalPhotos(): Promise<boolean> {
        // –ê—Ç—Ä—ã–º–∞—Ü—å —Ñ–æ—Ç–∫—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        const serverPhotos = await firstValueFrom(this.api.getPhotos());
        const serverIds = new Set(serverPhotos.map(p => p.id));

        // –ê—Ç—Ä—ã–º–∞—Ü—å –ª–∞–∫–∞–ª—å–Ω—ã—è —Ñ–æ—Ç–∫—ñ
        const localPhotos = await this.storage.getAllPhotos();

        // –ü—Ä–∞–≤–µ—Ä—ã—Ü—å, —Ü—ñ —ë—Å—Ü—å —Ñ–æ—Ç–∫—ñ —û –ª–æ–∫–∞–ª—å–Ω—ã–º —Å—Ö–æ–≤—ñ—à—á—ã, —è–∫—ñ—Ö –Ω—è–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
        const orphanedPhotos = localPhotos.filter(p => !serverIds.has(p.id) && !p.isDeleted);

        // –ö–∞–ª—ñ —ë—Å—Ü—å —Ç–∞–∫—ñ—è ‚Äî —Ç—Ä—ç–±–∞ reconcile
        return orphanedPhotos.length > 0;
    }

}
