import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { LoggerService } from '../logger.service';

export enum AppMode {
    Real = 'real',       // ‚úÖ –ù–∞—Ä–º–∞–ª—å–Ω—ã —Ä—ç–∂—ã–º ‚Äî –ø—Ä–∞—Ü—É–µ–º –∑ —Å–µ—Ä–≤–µ—Ä–∞–º
    Offline = 'offline', // üì¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–∞—Å—Ç—É–ø–Ω—ã ‚Äî –ø—Ä–∞—Ü—É–µ–º –∑ IndexedDB
    Demo = 'demo'        // üß™ –î—ç–º–∞-—Ä—ç–∂—ã–º ‚Äî —Ñ—ç–π–∫–∞–≤—ã—è –¥–∞–Ω—ã—è, –Ω—è–º–∞ IndexedDB
}

interface IAppModeService {
    setMode(mode: AppMode): void;
    getMode(): AppMode;
    isDemo(): boolean;
    isReal(): boolean;
    isOffline(): boolean;
}

@Injectable({ providedIn: 'root' })
export class AppModeService implements IAppModeService {

    private readonly STORAGE_KEY = 'app-mode';
    
    /** üîÑ –£–Ω—É—Ç—Ä–∞–Ω—ã BehaviorSubject –¥–ª—è —Ä—ç–∂—ã–º—É */
    private modeSubject = new BehaviorSubject<AppMode>(AppMode.Real);   // ‚úÖ Default = Real
    
    /** üì° Observable –¥–ª—è –ø–∞–¥–ø—ñ—Å—á—ã–∫–∞—û */
    mode$: Observable<AppMode> = this.modeSubject.asObservable();

    constructor( private logger: LoggerService ) {
        const saved = localStorage.getItem(this.STORAGE_KEY) as AppMode;
        if (saved && Object.values(AppMode).includes(saved)) {
            this.modeSubject.next(saved);
        }
    }

    /** ‚öôÔ∏è –£—Å—Ç–∞–ª—è–≤–∞—Ü—å —Ä—ç–∂—ã–º */
    setMode(mode: AppMode): void {
        this.logger.log('--s', `‚öôÔ∏è AppModeService: –†—ç–∂—ã–º —É—Å—Ç–∞–ª—è–≤–∞–Ω—ã: ${mode}`);
        this.modeSubject.next(mode);
        localStorage.setItem(this.STORAGE_KEY, mode);
    }

    /** üîç –ê—Ç—Ä—ã–º–ª—ñ–≤–∞—Ü—å —Ä—ç–∂—ã–º –Ω–µ–ø–∞—Å—Ä—ç–¥–Ω–∞ */
    getMode(): AppMode {
        return this.modeSubject.getValue();
    }

    /** üß™ –¶—ñ –≥—ç—Ç–∞ –¥—ç–º–∞-—Ä—ç–∂—ã–º */
    isDemo(): boolean {
        return this.getMode() === AppMode.Demo;
    }

    /** üì∂ –¶—ñ –ø—Ä–∞—Ü—É–µ–º –∑ —Å–∞–ø—Ä–∞—û–¥–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º */
    isReal(): boolean {
        return this.getMode() === AppMode.Real;
    }

    /** üì¥ –¶—ñ –≥—ç—Ç–∞ –∞—û—Ç–∞–Ω–æ–º–Ω—ã —Ä—ç–∂—ã–º */
    isOffline(): boolean {
        return this.getMode() === AppMode.Offline;
    }
}

