import { Injectable } from '@angular/core';
import { GalleryIndexedDbService } from '../indexedDbServices/gallery-indexedDb.service';
import { PhotoIndexedDbService } from '../indexedDbServices/photo-indexedDB.service';
import { GalleryApiService } from '../apiServices/gallery-api.service';
import { GallerySyncService } from './gallery-sync.service';
import { PhotoSyncService } from './photo-sync.service';
import { Photo } from '../../models/photo-interfaces';
import { firstValueFrom } from 'rxjs';
import { LoggerService } from '../logger.service';
import { Gallery } from '../../models/gallery-interfaces';
import { OrphanedConfirmDialogComponent } from '../../shared/orphaned-confirm-dialog.ts/orphaned-confirm-dialog.ts.component';
import { GalleryStateService } from '../stateServices/gallery-state.service';
import { MatDialog } from '@angular/material/dialog';

@Injectable({ providedIn: 'root' })
export class ReconciliationService {
    constructor(
        private logger: LoggerService,
        private galleryDb: GalleryIndexedDbService,
        private photoDb: PhotoIndexedDbService,
        private galleryApi: GalleryApiService,
        private gallerySync: GallerySyncService,
        private photoSync: PhotoSyncService,
        private galleryState: GalleryStateService,
        private dialog: MatDialog
    ) { }

    async reconcile(): Promise<void> {
        const localGalleries = await this.galleryDb.getAllGalleries();
        const serverGalleries = await firstValueFrom(this.galleryApi.getGalleries());
        this.logger.log('--s', 'üß™ ReconciliationService: –∞—Ç—Ä—ã–º–∞–Ω—ã—è –≥–∞–ª–µ—Ä—ç—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞:', serverGalleries);
        const serverGalleryIds = new Set(serverGalleries.map(g => g.id));

        const orphanedServerPhotos = await this.getOrphanedServerPhotos();
        if (orphanedServerPhotos.length > 0) {
            this.logger.warn('--s', `‚ö†Ô∏è –ó–Ω–æ–π–¥–∑–µ–Ω–∞ ${orphanedServerPhotos.length} —Ñ–æ—Ç–∞, —è–∫—ñ—è —ë—Å—å—Ü—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã, –∞–ª–µ –∞–¥—Å—É—Ç–Ω—ñ—á–∞—é—Ü—å –ª–∞–∫–∞–ª—å–Ω–∞`);

            for (const photo of orphanedServerPhotos) {
                await this.photoDb.savePhotoMetadataOnly(photo); // ‚¨ÖÔ∏è –î–∞–¥–∞–µ–º —É IndexedDB
            }
        }

        for (const gallery of localGalleries) {
            if (!serverGalleryIds.has(gallery.id)) {
                this.logger.warn('--s', `‚ö†Ô∏è Gallery '${gallery.name}' (id=${gallery.id}) missing on server. Syncing...`);
                this.logger.log('--s', 'üíæ Syncing gallery in reconcile():', gallery);
                await this.gallerySync.syncSingleGallery(gallery);
            }

            await this.photoSync.syncPhotosForGallery(gallery.id);
        }

        this.logger.log('--s', '‚úÖ Reconciliation complete');
    }


    private async getOrphanedLocalPhotos(): Promise<Photo[]> {
        const serverPhotoIds = await this.photoSync.getServerPhotoIds();
        const localPhotos = await this.photoDb.getAllPhotos();

        return localPhotos.filter(
            p => p.id !== undefined && !serverPhotoIds.has(String(p.id)) && !p.isDeleted
        );
    }


    /**
 * –í—è—Ä—Ç–∞–µ —Ñ–æ—Ç–∞, —è–∫—ñ—è —ñ—Å–Ω—É—é—Ü—å –Ω–∞ —Å—ç—Ä–≤–µ—Ä—ã, –∞–ª–µ –∞–¥—Å—É—Ç–Ω—ñ—á–∞—é—Ü—å —É –ª–∞–∫–∞–ª—å–Ω–∞–π IndexedDB.
 *
 * –ì—ç—Ç—ã—è —Ñ–æ—Ç–∞ –ª—ñ—á–∞—Ü—Ü–∞ "—Å—ñ—Ä–æ—Ç–∞–º—ñ" –∑ –ø—É–Ω–∫—Ç—É –≥–ª–µ–¥–∂–∞–Ω–Ω—è –ª–∞–∫–∞–ª—å–Ω–∞–≥–∞ –∫–ª—ñ–µ–Ω—Ç–∞ ‚Äî
 * –Ω–∞–ø—Ä—ã–∫–ª–∞–¥, –±–∞–∑–∞ –¥–∞–¥–∑–µ–Ω—ã—Ö –º–∞–≥–ª–∞ –±—ã—Ü—å —Å–∫—ñ–Ω—É—Ç–∞—è, –≤—ã–¥–∞–ª–µ–Ω–∞—è —Ü—ñ –ø–∞—à–∫–æ–¥–∂–∞–Ω–∞—è.
 *
 * –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ –º—É—Å—ñ—Ü—å –≤—ã—Ä–∞—à—ã—Ü—å, —à—Ç–æ —Ä–∞–±—ñ—Ü—å –∑ —Ç–∞–∫—ñ–º—ñ —Ñ–æ—Ç–∞–º—ñ:
 * - –∞–¥–Ω–∞–≤—ñ—Ü—å —ñ—Ö —É IndexedDB
 * - –∞–±–æ –≤—ã–¥–∞–ª—ñ—Ü—å –∑ —Å–µ—Ä–≤–µ—Ä–∞
 *
 * –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è –¥–≤—É—Ö–±–∞–∫–æ–≤–∞–≥–∞ –ø–∞—Ä–∞—û–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ª–∞–∫–∞–ª—å–Ω–∞–π —ñ —Å–µ—Ä–≤–µ—Ä–Ω–∞–π –±–∞–∑—ã.
 */
    async getOrphanedServerPhotos(): Promise<Photo[]> {
        const serverPhotos = await this.photoSync.getServerPhotos();
        const localPhotos = await this.photoDb.getAllPhotos();
        const localPhotoIds = new Set(localPhotos.map(p => String(p.id)));

        return serverPhotos.filter(p => !localPhotoIds.has(String(p.id)));
    }

    /**
 * –í–µ—Ä–Ω–µ –≥–∞–ª–µ—Ä—ç—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞, —è–∫—ñ—Ö –Ω—è–º–∞ —û IndexedDB (–∞—Ä—Ñ–∞–Ω—Å–∫—ñ—è).
 */
    private async getOrphanedServerGalleries(): Promise<Gallery[]> {
        const serverGalleries = await firstValueFrom(this.galleryApi.getGalleries());
        const localGalleries = await this.galleryDb.getAllGalleries();

        const localIds = new Set(localGalleries.map(g => g.id));

        // 4. –§—ñ–ª—å—Ç—Ä—É–µ–º —Ç—ã—è, —è–∫—ñ—Ö –Ω—è–º–∞ –ª–∞–∫–∞–ª—å–Ω–∞
        const orphaned = serverGalleries.filter(g => !localIds.has(g.id));

        this.logger.log('--s', 'üß™ ReconciliationService: –∑–Ω–æ–π–¥–∑–µ–Ω—ã –∞—Ä—Ñ–∞–Ω—Å–∫—ñ—è –≥–∞–ª–µ—Ä—ç—ñ:', orphaned);

        return orphaned;
    }


    // ReconciliationService.ts

    private async storeOrphanedServerGalleries(): Promise<void> {
        const orphaned = await this.getOrphanedServerGalleries();
        if (orphaned.length === 0) return;

        // 1. –ü—ã—Ç–∞–µ–º—Å—è —û –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞ –ø—Ä–∞–∑ –¥—ã—è–ª–æ–≥
        const shouldRestore = await firstValueFrom(
            this.dialog.open(OrphanedConfirmDialogComponent, {
                data: {
                    title: '–ê–¥–Ω–∞—û–ª–µ–Ω–Ω–µ –≥–∞–ª–µ—Ä—ç–π',
                    message: `–ù–∞ —Å–µ—Ä–≤–µ—Ä—ã –∑–Ω–æ–π–¥–∑–µ–Ω—ã ${orphaned.length} –≥–∞–ª–µ—Ä—ç—ñ, —è–∫—ñ—Ö –Ω—è–º–∞ —û –ª–∞–∫–∞–ª—å–Ω–∞–π –±–∞–∑–µ. –ê–¥–Ω–∞–≤—ñ—Ü—å —ñ—Ö?`,
                    confirmText: '–ê–¥–Ω–∞–≤—ñ—Ü—å',
                    cancelText: '–ü—Ä–∞–ø—É—Å—å—Ü—ñ—Ü—å'
                }
            }).afterClosed()
        );

        if (!shouldRestore) {
            this.logger.log('--s', 'üü° –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ –∞–¥–º–æ–≤—ñ—û—Å—è –∞–¥–Ω–∞—û–ª—è—Ü—å –∞—Ä—Ñ–∞–Ω—Å–∫—ñ—è –≥–∞–ª–µ—Ä—ç—ñ');
            return;
        }

        // 2. –ó–∞—Ö–æ—û–≤–∞–µ–º –∫–æ–∂–Ω—É—é –≥–∞–ª–µ—Ä—ç—é —û IndexedDB
        for (const gallery of orphaned) {
            await this.galleryDb.addGallery({ ...gallery, isSynced: true });
        }

        this.logger.log('--s', '‚úÖ –ê—Ä—Ñ–∞–Ω—Å–∫—ñ—è –≥–∞–ª–µ—Ä—ç—ñ –∑–∞—Ö–∞–≤–∞–Ω—ã –ª–∞–∫–∞–ª—å–Ω–∞:', orphaned);

        // 3. –ê–±–Ω–∞—û–ª—è–µ–º state
        const updated = await this.galleryDb.getAllGalleries();
        this.galleryState.setGalleries(updated);
    }

}
