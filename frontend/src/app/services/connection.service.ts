import { Injectable } from '@angular/core';
import { BehaviorSubject, interval, of, firstValueFrom } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GalleryApiService } from './apiServices/gallery-api.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { LoggerService } from './logger.service';


export interface IConnectionService {
    isOnlineSnapshot(): boolean;
    checkConnection(): Promise<void>;
    isOnlineSnapshot(): boolean;
    checkConnection(): Promise<void>;
}


@Injectable({ providedIn: 'root' })
export class ConnectionService implements IConnectionService {
    private readonly checkIntervalMs = 10000;
    private lastKnownStatus = true;

    private onlineSubject = new BehaviorSubject<boolean>(true);
    public online$ = this.onlineSubject.asObservable();

    constructor(
        private logger: LoggerService,
        private galleryApi: GalleryApiService,
        private snackBar: MatSnackBar
    ) {
        this.startPeriodicCheck();
    }

    /** –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∞—Ä—Ç–∞—Å—å—Ü—å –±–µ–∑ –ø–∞–¥–ø—ñ—Å–∫—ñ */
    public isOnlineSnapshot(): boolean {
        return this.onlineSubject.getValue();
    }

    /** –ó–∞–ø—É—Å—å—Ü—ñ—Ü—å —Ä—É—á–Ω—É—é –ø—Ä–∞–≤–µ—Ä–∫—É —Å—É–≤—è–∑—ñ */
    public async checkConnection(): Promise<void> {
        const isOnline = await firstValueFrom(
            this.galleryApi.pingServer().pipe(
                map(response => {
                    this.logger.log('--s', 'üì• ConnectionService: pingServer response:', response);
                    return true;
                }),
                catchError(err => {
                    this.logger.warn('--s', '‚ùå ConnectionService: pingServer catchError', err);
                    return of(false);
                })
            )
        );

        this.logger.log('--s', 'üîç ConnectionService: checkConnection(): isOnline =', isOnline);
        this.handleStatusChange(isOnline);
    }

    /** –£–Ω—É—Ç—Ä–∞–Ω—ã –∑–∞–ø—É—Å–∫ –ø—ç—Ä—ã—è–¥—ã—á–Ω–∞–π –ø—Ä–∞–≤–µ—Ä–∫—ñ */
    private startPeriodicCheck(): void {
        interval(this.checkIntervalMs)
            .pipe(switchMap(() => this.galleryApi.pingServer().pipe(
                map(() => true),
                catchError(() => of(false))
            )))
            .subscribe(isOnline => this.handleStatusChange(isOnline));
    }

    /** –ê–ø—Ä–∞—Ü–æ—û–∫–∞ –∑—å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—É */
    private handleStatusChange(isOnline: boolean): void {
        if (isOnline !== this.lastKnownStatus) {
            this.lastKnownStatus = isOnline;
            this.onlineSubject.next(isOnline);

            if (isOnline) {
                this.snackBar.open('‚úÖ –°—É–≤—è–∑—å –∑ —Å–µ—Ä–≤–µ—Ä–∞–º –∞–¥–Ω–æ—û–ª–µ–Ω–∞.', '–û–ö', { duration: 3000 });
            } else {
                this.snackBar.open('‚ùå –ù—è–º–∞ —Å—É–≤—è–∑—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞–º. –ê—û—Ç–∞–Ω–æ–º–Ω—ã —Ä—ç–∂—ã–º —É–∫–ª—é—á–∞–Ω—ã.', '–û–ö', { duration: 5000 });
            }
        } else {
            // –ê–±–Ω–∞—û–ª—è–µ–º —Å—Ç–∞–Ω, –∫–∞–± UI –±—ã—û —É –∫—É—Ä—Å–µ, –Ω–∞–≤–∞—Ç –∫–∞–ª—ñ –Ω—ñ—á–æ–≥–∞ –Ω–µ –∑—å–º—è–Ω—ñ–ª–∞—Å—è (–Ω–∞–ø—Ä—ã–∫–ª–∞–¥, –ø—Ä—ã –ø–µ—Ä—à—ã–º –∑–∞–ø—É—Å–∫—É)
            this.onlineSubject.next(isOnline);
        }
    }

}

