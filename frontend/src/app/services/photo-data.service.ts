import { Injectable } from '@angular/core';
import { Photo } from '../models/photo';
import { PhotoIndexedDbService, PhotoToStore } from './photo-of-indexedDB.service';
import { PhotoApiService } from './photo-api.service';
import { firstValueFrom } from 'rxjs';
import { MockPhotoService } from './mock-photo.service';
import { AppModeService } from './app-mode.service';


@Injectable({
  providedIn: 'root'
})
export class PhotoDataService {

  constructor(
    private storage: PhotoIndexedDbService,
    private api: PhotoApiService,
    private mockPhotoService: MockPhotoService,
    private appModeService: AppModeService) { }

  async savePhoto(photo: PhotoToStore): Promise<number> {
    console.log('savePhoto:', photo);
    return this.storage.savePhoto(photo);
  }

  async getAllPhotos(): Promise<Photo[]> {
    console.log('PhotoDataService: getAllPhotos called');
    if (this.appModeService.isDemo())
      return this.mockPhotoService.getMockPhotos();
    else
      return this.storage.getAllPhotos();
  }

  async loadPhotosFromServerToLocalDB() {
    const serverPhotos = await firstValueFrom(this.api.getPhotos());

    for (const sp of serverPhotos) {
      const exists = await this.storage.photoExists(sp.id);
      if (exists) {
        console.log(`‚ÑπÔ∏è PhotoDataService: Photo with id=${sp.id} already exists in IndexedDB, skipping`);
        continue;
      }

      const file = await this.api.downloadPhotoFile(sp.id);

      const photoToStore: PhotoToStore = {
        file: file,
        fileName: sp.fileName,
        description: sp.description,
        title: sp.title,
        exif: sp.exifData,
        isSynced: true
      };

      await this.storage.savePhotoWithId(sp.id, photoToStore); // üí° –≥–ª. –Ω—ñ–∂—ç–π
    }

    console.log('‚úÖ PhotoDataService: Photos from server loaded into IndexedDB');
  }

  async uploadPhotoToServer(photo: Photo): Promise<void> {
    console.log('üîÑ PhotoDataService: –°—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑—É–µ–º —Ñ–æ—Ç–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞–º:', photo.id, photo.fileName);
    if (!photo.file) {
      console.warn('‚ùå PhotoDataService: Photo.file –∞–¥—Å—É—Ç–Ω—ñ—á–∞–µ, —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—è –Ω–µ –±—É–¥–∑–µ –≤—ã–∫–∞–Ω–∞–Ω–∞', photo);
      return;
    }

    const formData = new FormData();
    formData.append('ImageFile', photo.file);
    const title = photo.title && photo.title.trim() !== '' ? photo.title : '[–ë–µ–∑ –Ω–∞–∑–≤—ã]';
    formData.append('Title', title ?? '');
    formData.append('Description', photo.description ?? '');
    formData.append('ExifData', JSON.stringify(photo.exifData ?? {}));

    try {
      const originalId = photo.id; // ‚úÖ –ó–∞—Ö–æ—û–≤–∞–µ–º —Å—Ç–∞—Ä—ã ID –ø–µ—Ä–∞–¥ –∑–∞–º–µ–Ω–∞–π

      const response = await firstValueFrom(this.api.uploadPhoto(formData));
      console.log('‚úÖ PhotoDataService: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É–¥–∞–ª–∞—Å—è');

      // ‚úÖ –°—Ç–≤–∞—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø—ñ—é –¥–ª—è –∑–∞—Ö–∞–≤–∞–Ω–Ω—è
      const newPhoto: PhotoToStore = {
        file: photo.file,
        fileName: photo.fileName,
        title: photo.title,
        description: photo.description,
        exif: photo.exifData,
        isSynced: true
      };

      // ‚úÖ –í—ã–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å—ñ—é –∑ IndexedDB
      await this.storage.deletePhoto(originalId);
      console.log(`üóëÔ∏è PhotoDataService: Photo deleted from IndexedDB (id=${originalId})`);

      // ‚úÖ –ó–∞—Ö–æ—û–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å—ñ—é –∑ –Ω–æ–≤—ã–º ID
      console.log(`PhotoDataService: Photo returned from server with id: ${response.id}`);
      await this.storage.savePhotoWithId(response.id, { ...newPhoto, file: photo.file });

    } catch (error) {
      console.error('‚ùå PhotoDataService: Error syncing photo to server:', error);
    }
  }

  async syncWithServer(): Promise<void> {
    console.log('üîÑ PhotoDataService: –ó–∞–ø—É—Å–∫ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ —Ñ–æ—Ç–∞–∫...');
    try {
      const unsyncedPhotos = await this.storage.getPhotosForSync();

      for (const photo of unsyncedPhotos) {
        console.log('üîç –ü—Ä–∞–≤–µ—Ä–∫–∞ photo:', photo.id, 'isDeleted =', photo.isDeleted);
        if (photo.isDeleted) {
          if (!photo.id) {
            console.warn(`‚ö†Ô∏è PhotoDataService: –§–æ—Ç–∞ –±–µ–∑ id, –ø—Ä–∞–ø—É—Å–∫–∞–µ–º –≤—ã–¥–∞–ª–µ–Ω–Ω–µ`, photo);
            continue;
          }

          console.log(`üóëÔ∏è PhotoDataService: –§–æ—Ç–∞ –∑ id=${photo.fileName} –ø–∞–∑–Ω–∞—á–∞–Ω–∞ –Ω–∞ –≤—ã–¥–∞–ª–µ–Ω–Ω–µ`);
          console.log('üì° –°–ø—Ä–∞–±—É–µ–º –≤—ã–¥–∞–ª—ñ—Ü—å photo.id =', photo.id);
          await this.api.deletePhoto(photo.id); // —á–∞–∫–∞–µ–º, –ø–∞–∫—É–ª—å –≤—ã–¥–∞–ª—ñ—Ü—Ü–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞
          await this.storage.deletePhoto(photo.id); // –ø–æ—Ç—ã–º –≤—ã–¥–∞–ª—è–µ–º –∑ IndexedDB
          console.log(`‚úÖ PhotoDataService: –§–æ—Ç–∞ –∑ id=${photo.fileName} –≤—ã–¥–∞–ª–µ–Ω–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞ —ñ IndexedDB`);
        } else {
          await this.uploadPhotoToServer(photo as Photo);
        }
      }

    } catch (error) {
      console.error('‚ùå PhotoDataService: –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º:', error);
    }
  }

  async deletePhoto(photo: Photo): Promise<void> {
    console.log("‚û°Ô∏è PhotoDataService: –ú–∞—Ä–∫—ñ—Ä—É–µ–º —Ñ–æ—Ç–∞ —è–∫ –≤—ã–¥–∞–ª–µ–Ω–∞–µ —û IndexedDB:", photo);

    // ‚úÖ 1. –ö–∞–ª—ñ —Ñ–æ—Ç–∞ –±—ã–ª–æ —û–∂–æ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω–∞ ‚Äî –º–∞—Ä–∫—ñ—Ä—É–µ–º
    if (photo.isSynced) {
      await this.storage.markPhotoDeleted(photo.id);
      console.log("üü° PhotoDataService: –§–æ—Ç–∞ –ø–∞–∑–Ω–∞—á–∞–Ω–∞ —è–∫ –≤—ã–¥–∞–ª–µ–Ω–∞–µ —ñ –±—É–¥–∑–µ –≤—ã–¥–∞–ª–µ–Ω–∞ –ø—Ä—ã —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞—Ü—ã—ñ");
      return;
    }

    // ‚úÖ 2. –ö–∞–ª—ñ —Ñ–æ—Ç–∞ —è—à—á—ç –Ω–µ —Å—ñ–Ω—Ö—Ä–∞–Ω—ñ–∑–∞–≤–∞–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–∞ –≤—ã–¥–∞–ª—è–µ–º
    await this.storage.deletePhoto(photo.id);
    console.log("üóëÔ∏è PhotoDataService: –§–æ—Ç–∞ –≤—ã–¥–∞–ª–µ–Ω–∞ –∑ IndexedDB");
  }

  async markPhotoDeleted(id: number | string): Promise<void> {
    console.log(`PhotoDataService: Marking photo id=${id} as deleted`);
    return this.storage.markPhotoDeleted(id);
  }

  async clearLocalStorage(): Promise<void> {
    await this.storage.clearAllPhotos();
  }
}
